{"ast":null,"code":"export const isAuthenticated = () => {\n  // Retrieve the token from wherever it's stored (e.g., localStorage, cookies)\n  const token = localStorage.getItem('token');\n\n  // Check if the token is valid (you might need to decode and verify it)\n  const isValidToken = validateToken(token);\n  return !!isValidToken;\n};\nconst validateToken = token => {\n  if (!token) {\n    return false;\n  }\n\n  // Example: Decode and verify the token (replace this with your actual logic)\n  try {\n    // Decode the token (you might use a library like jwt-decode or jsonwebtoken)\n    const decodedToken = JSON.parse(atob(token.split('.')[1]));\n\n    // Verify additional conditions if needed\n    // For example, check token expiration, user roles, etc.\n\n    return true; // Token is valid\n  } catch (error) {\n    console.error('Error decoding or verifying the token:', error);\n    return false; // Token is invalid\n  }\n};","map":{"version":3,"names":["isAuthenticated","token","localStorage","getItem","isValidToken","validateToken","decodedToken","JSON","parse","atob","split","error","console"],"sources":["/Users/omerahmer/Downloads/nano website/nano_website/src/authService.ts"],"sourcesContent":["export const isAuthenticated = () => {\n    // Retrieve the token from wherever it's stored (e.g., localStorage, cookies)\n    const token = localStorage.getItem('token');\n  \n    // Check if the token is valid (you might need to decode and verify it)\n    const isValidToken = validateToken(token);\n  \n    return !!isValidToken;\n  };\n  \n  const validateToken = (token: string | null) => {\n    if (!token) {\n      return false;\n    }\n  \n    // Example: Decode and verify the token (replace this with your actual logic)\n    try {\n      // Decode the token (you might use a library like jwt-decode or jsonwebtoken)\n      const decodedToken = JSON.parse(atob(token.split('.')[1]));\n  \n      // Verify additional conditions if needed\n      // For example, check token expiration, user roles, etc.\n  \n      return true; // Token is valid\n    } catch (error) {\n      console.error('Error decoding or verifying the token:', error);\n      return false; // Token is invalid\n    }\n  };"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAGA,CAAA,KAAM;EACjC;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;EAE3C;EACA,MAAMC,YAAY,GAAGC,aAAa,CAACJ,KAAK,CAAC;EAEzC,OAAO,CAAC,CAACG,YAAY;AACvB,CAAC;AAED,MAAMC,aAAa,GAAIJ,KAAoB,IAAK;EAC9C,IAAI,CAACA,KAAK,EAAE;IACV,OAAO,KAAK;EACd;;EAEA;EACA,IAAI;IACF;IACA,MAAMK,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACR,KAAK,CAACS,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;IAE1D;IACA;;IAEA,OAAO,IAAI,CAAC,CAAC;EACf,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC9D,OAAO,KAAK,CAAC,CAAC;EAChB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}